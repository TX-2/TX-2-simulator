const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const WasmPackPlugin = require("@wasm-tool/wasm-pack-plugin");
const path = require("path");

module.exports = {
  entry: "./src/index.tsx",
  output: {
    path: path.resolve(__dirname, "dist"),
    filename: "bundle.[hash].js"
  },
  devServer: {
    compress: true,
      port: 8081,
    hot: true,
    static: './dist',
    historyApiFallback: true,
    open: true
  },
  resolve: {
      extensions: ['.tsx', '.ts', '.js', '.json', '.wasm', '.css', '.scss'],
  },
  module: {
    rules: [
	{
            test: /.(t|j)(s|sx)$/,
            exclude: /node_modules/,
            use: {
		loader: "ts-loader"
            }
	},
	{
            test: /.s?css$/,
            use: [
		{
		    loader: 'style-loader'
		},
		{
		    loader: "@teamsupercell/typings-for-css-modules-loader",
		    options: {
			banner: "// Generated by @teamsupercell/typings-for-css-modules-loader"
		    }
		},
		{
		    loader: "css-loader",
		    options: {
			modules: true
		    }
		},
		{
		    loader: "sass-loader",
		    options: {
			sourceMap: true,
			warnRuleAsWarning: true,
		    }
		},
	    ]
	},
	{
	    enforce: 'pre',
	    test: /\.js$/,
	    loader: 'source-map-loader'
	}
    ]
  },
  plugins: [
      new webpack.WatchIgnorePlugin({
	  paths: [/css\.d\.ts$/]
      }),
      new HtmlWebpackPlugin({
	  template: __dirname + "/public/index.html",
	  filename: "index.html"
      }),
      new WasmPackPlugin({
	  crateDirectory: path.resolve(__dirname, ".")
      }),
  ],
  mode: "development",
  devtool: 'inline-source-map',
  experiments: {
    asyncWebAssembly: true,
  },
};

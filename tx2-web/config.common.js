const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const WasmPackPlugin = require("@wasm-tool/wasm-pack-plugin");
const path = require("path");

function make_webpack_config_exports(build_type) {
  function make_dist_output_path(build_type) {
    return path.resolve(__dirname, "built-files/" + build_type + "/dist");
  }

  function devtool(build_type) { // string | false
    if (build_type == "development" || build_type == "profiling") {
      return 'inline-source-map';
    } else {
      return false;
    }
  }

  function webpack_mode(build_type) { // "development" | "production" | "none"
    if (build_type == "development") {
      return "development";
    } else if (build_type == "release") {
      return "production";
    } else if (build_type == "profiling") {
      return "production";
    } else {
      throw "unknown build type for webpack_mode";
    }
  }

  return {
    entry: "./src/index.tsx",
    output: {
      path: make_dist_output_path(build_type),
      filename: "bundle.[hash].js"
    },
    devServer: {
      compress: true,
      port: 8081,
      hot: true,
      static: make_dist_output_path(build_type),
      historyApiFallback: true,
      open: true
    },
    resolve: {
      extensions: ['.tsx', '.ts', '.js', '.json', '.wasm', '.css', '.scss'],
    },
    module: {
      rules: [
	{
          test: /.(t|j)(s|sx)$/,
          exclude: /node_modules/,
          use: {
	    loader: "ts-loader",
	    options: {
	      compilerOptions: {
		outDir: make_dist_output_path(build_type), /* Redirect output structure to the directory. */
	      }
	    }
          }
	},
	{
          test: /.s?css$/,
          use: [
	    {
	      loader: 'style-loader'
	    },
	    {
	      loader: "@teamsupercell/typings-for-css-modules-loader",
	      options: {
		banner: "// Generated by @teamsupercell/typings-for-css-modules-loader\n// Builds fail when this file is missing, which happens in CI pipelines; package.json just arranges for a second build which succeeds since the first creates this file."
	      }
	    },
	    {
	      loader: "css-loader",
	      options: {
		modules: true
	      }
	    },
	    {
	      loader: "sass-loader",
	      options: {
		sourceMap: true,
		warnRuleAsWarning: true,
	      }
	    },
	  ]
	},
	{
	  enforce: 'pre',
	  test: /\.js$/,
	  loader: 'source-map-loader'
	}
      ]
    },
    plugins: [
      new webpack.WatchIgnorePlugin({
	paths: [/css\.d\.ts$/]
      }),
      new HtmlWebpackPlugin({
	template: __dirname + "/public/index.html",
	filename: "index.html"
      }),
      new WasmPackPlugin({
	crateDirectory: path.resolve(__dirname, "."),
	outDir: "built-files/" + build_type + "/pkg",
	watchDirectories: [
	  "../base/src",
	  "../base/src/collections",
	  "../base/src/instruction",
	  "../base/src/onescomplement",
	  "../base/src/onescomplement/signed",
	  "../base/src/onescomplement/unsigned",
	  "../cpu/src",
	  "../cpu/src/control",
	  "../cpu/src/io"
	].map(relative => path.resolve(__dirname, relative))
      })
    ],
    devtool: devtool(build_type),
    mode: webpack_mode(build_type),

    // Guidance is to keep this below ~240K.
    performance: {
      maxEntrypointSize: 512000,
      maxAssetSize: 512000
    },

    experiments: {
      asyncWebAssembly: true,
    },
  };
}

exports.make_webpack_config_exports = make_webpack_config_exports;

use super::super::ast::*;
use super::super::span::span;
use super::comma_transformation;
use base::u36;

// This test case is taken from the table "COMMA CHART" in section
// 6-2.4, "NUMERICAL FORMAT - USE OF COMMAS" of the Users
// Handbook.
#[test]
fn test_comma_transformation_0_0() {
    assert_eq!(
        comma_transformation(&None, u36!(0o444_333_222_111), &None),
        u36!(0o444_333_222_111)
    );
}

// This test case is taken from the table "COMMA CHART" in section
// 6-2.4, "NUMERICAL FORMAT - USE OF COMMAS" of the Users
// Handbook.
#[test]
fn test_comma_transformation_0_1() {
    // For convenience, our comma test cases adopt a standard
    // (imaginary) layout for the input.  We do this so that the
    // input spans could conceivably have been generated by real
    // input, so that our tests don't inadvertently require the
    // implementation to allow inconsistent/invalid inputs.
    //
    // Span 0..3 is the initial commas (or spaces).
    // Span 3..15 is the constant 444333222111.
    // Span 15..18 is the trailing commas (or spaces).
    assert_eq!(
        comma_transformation(
            &None,
            u36!(0o444_333_222_111),
            &Some(Commas::One(span(15..16)))
        ),
        u36!(0o111_000_000_000)
    );
}

// This test case is taken from the table "COMMA CHART" in section
// 6-2.4, "NUMERICAL FORMAT - USE OF COMMAS" of the Users
// Handbook.
#[test]
fn test_comma_transformation_0_2() {
    // For convenience, our comma test cases adopt a standard
    // (imaginary) layout for the input.  We do this so that the
    // input spans could conceivably have been generated by real
    // input, so that our tests don't inadvertently require the
    // implementation to allow inconsistent/invalid inputs.
    //
    // Span 0..3 is the initial commas (or spaces).
    // Span 3..15 is the constant 444333222111.
    // Span 15..18 is the trailing commas (or spaces).
    assert_eq!(
        comma_transformation(
            &None,
            u36!(0o444_333_222_111),
            &Some(Commas::Two(span(15..17)))
        ),
        u36!(0o222_111_000_000)
    );
}

// This test case is taken from the table "COMMA CHART" in section
// 6-2.4, "NUMERICAL FORMAT - USE OF COMMAS" of the Users
// Handbook.
#[test]
fn test_comma_transformation_0_3() {
    // For convenience, our comma test cases adopt a standard
    // (imaginary) layout for the input.  We do this so that the
    // input spans could conceivably have been generated by real
    // input, so that our tests don't inadvertently require the
    // implementation to allow inconsistent/invalid inputs.
    //
    // Span 0..3 is the initial commas (or spaces).
    // Span 3..15 is the constant 444333222111.
    // Span 15..18 is the trailing commas (or spaces).
    assert_eq!(
        comma_transformation(
            &None,
            u36!(0o444_333_222_111),
            &Some(Commas::Three(span(15..18)))
        ),
        u36!(0o333_222_111_000)
    );
}

// This test case is taken from the table "COMMA CHART" in section
// 6-2.4, "NUMERICAL FORMAT - USE OF COMMAS" of the Users
// Handbook.
#[test]
fn test_comma_transformation_1_0() {
    // For convenience, our comma test cases adopt a standard
    // (imaginary) layout for the input.  We do this so that the
    // input spans could conceivably have been generated by real
    // input, so that our tests don't inadvertently require the
    // implementation to allow inconsistent/invalid inputs.
    //
    // Span 0..3 is the initial commas (or spaces).
    // Span 3..15 is the constant 444333222111.
    // Span 15..18 is the trailing commas (or spaces).
    assert_eq!(
        comma_transformation(
            &Some(Commas::One(span(2..3))),
            u36!(0o444_333_222_111),
            &None,
        ),
        u36!(0o000_000_000_111)
    );
}

// This test case is taken from the table "COMMA CHART" in section
// 6-2.4, "NUMERICAL FORMAT - USE OF COMMAS" of the Users
// Handbook.
#[test]
fn test_comma_transformation_1_1() {
    // For convenience, our comma test cases adopt a standard
    // (imaginary) layout for the input.  We do this so that the
    // input spans could conceivably have been generated by real
    // input, so that our tests don't inadvertently require the
    // implementation to allow inconsistent/invalid inputs.
    //
    // Span 0..3 is the initial commas (or spaces).
    // Span 3..15 is the constant 444333222111.
    // Span 15..18 is the trailing commas (or spaces).
    assert_eq!(
        comma_transformation(
            &Some(Commas::One(span(2..3))),
            u36!(0o444_333_222_111),
            &Some(Commas::One(span(15..16))),
        ),
        u36!(0o000_222_111_000)
    );
}

// This test case is taken from the table "COMMA CHART" in section
// 6-2.4, "NUMERICAL FORMAT - USE OF COMMAS" of the Users
// Handbook.
#[test]
fn test_comma_transformation_1_2() {
    // For convenience, our comma test cases adopt a standard
    // (imaginary) layout for the input.  We do this so that the
    // input spans could conceivably have been generated by real
    // input, so that our tests don't inadvertently require the
    // implementation to allow inconsistent/invalid inputs.
    //
    // Span 0..3 is the initial commas (or spaces).
    // Span 3..15 is the constant 444333222111.
    // Span 15..18 is the trailing commas (or spaces).
    assert_eq!(
        comma_transformation(
            &Some(Commas::One(span(2..3))),
            u36!(0o444_333_222_111),
            &Some(Commas::Two(span(15..17))),
        ),
        u36!(0o000_111_000_000)
    );
}

// This test case is taken from the table "COMMA CHART" in section
// 6-2.4, "NUMERICAL FORMAT - USE OF COMMAS" of the Users
// Handbook.
#[test]
fn test_comma_transformation_1_3() {
    // For convenience, our comma test cases adopt a standard
    // (imaginary) layout for the input.  We do this so that the
    // input spans could conceivably have been generated by real
    // input, so that our tests don't inadvertently require the
    // implementation to allow inconsistent/invalid inputs.
    //
    // Span 0..3 is the initial commas (or spaces).
    // Span 3..15 is the constant 444333222111.
    // Span 15..18 is the trailing commas (or spaces).
    assert_eq!(
        comma_transformation(
            &Some(Commas::One(span(2..3))),
            u36!(0o444_333_222_111),
            &Some(Commas::Three(span(15..18))),
        ),
        u36!(0o444_333_222_000)
    );
}

// This test case is taken from the table "COMMA CHART" in section
// 6-2.4, "NUMERICAL FORMAT - USE OF COMMAS" of the Users
// Handbook.
#[test]
fn test_comma_transformation_2_0() {
    // For convenience, our comma test cases adopt a standard
    // (imaginary) layout for the input.  We do this so that the
    // input spans could conceivably have been generated by real
    // input, so that our tests don't inadvertently require the
    // implementation to allow inconsistent/invalid inputs.
    //
    // Span 0..3 is the initial commas (or spaces).
    // Span 3..15 is the constant 444333222111.
    // Span 15..18 is the trailing commas (or spaces).
    assert_eq!(
        comma_transformation(
            &Some(Commas::Two(span(1..3))),
            u36!(0o444_333_222_111),
            &None,
        ),
        u36!(0o000_000_222_111)
    );
}

// This test case is taken from the table "COMMA CHART" in section
// 6-2.4, "NUMERICAL FORMAT - USE OF COMMAS" of the Users
// Handbook.
#[test]
fn test_comma_transformation_2_1() {
    // For convenience, our comma test cases adopt a standard
    // (imaginary) layout for the input.  We do this so that the
    // input spans could conceivably have been generated by real
    // input, so that our tests don't inadvertently require the
    // implementation to allow inconsistent/invalid inputs.
    //
    // Span 0..3 is the initial commas (or spaces).
    // Span 3..15 is the constant 444333222111.
    // Span 15..18 is the trailing commas (or spaces).
    assert_eq!(
        comma_transformation(
            &Some(Commas::Two(span(1..3))),
            u36!(0o444_333_222_111),
            &Some(Commas::One(span(15..16))),
        ),
        u36!(0o000_000_111_000)
    );
}

// This test case is taken from the table "COMMA CHART" in section
// 6-2.4, "NUMERICAL FORMAT - USE OF COMMAS" of the Users
// Handbook.
#[test]
fn test_comma_transformation_2_2() {
    // For convenience, our comma test cases adopt a standard
    // (imaginary) layout for the input.  We do this so that the
    // input spans could conceivably have been generated by real
    // input, so that our tests don't inadvertently require the
    // implementation to allow inconsistent/invalid inputs.
    //
    // Span 0..3 is the initial commas (or spaces).
    // Span 3..15 is the constant 444333222111.
    // Span 15..18 is the trailing commas (or spaces).
    assert_eq!(
        comma_transformation(
            &Some(Commas::Two(span(1..3))),
            u36!(0o444_333_222_111),
            &Some(Commas::Two(span(15..17))),
        ),
        u36!(0o222_111_444_333)
    );
}

// This test case is taken from the table "COMMA CHART" in section
// 6-2.4, "NUMERICAL FORMAT - USE OF COMMAS" of the Users
// Handbook.
#[test]
fn test_comma_transformation_2_3() {
    // For convenience, our comma test cases adopt a standard
    // (imaginary) layout for the input.  We do this so that the
    // input spans could conceivably have been generated by real
    // input, so that our tests don't inadvertently require the
    // implementation to allow inconsistent/invalid inputs.
    //
    // Span 0..3 is the initial commas (or spaces).
    // Span 3..15 is the constant 444333222111.
    // Span 15..18 is the trailing commas (or spaces).
    assert_eq!(
        comma_transformation(
            &Some(Commas::Two(span(1..3))),
            u36!(0o444_333_222_111),
            &Some(Commas::Three(span(15..18))),
        ),
        u36!(0o000_000_444_333)
    );
}

// This test case is taken from the table "COMMA CHART" in section
// 6-2.4, "NUMERICAL FORMAT - USE OF COMMAS" of the Users
// Handbook.
#[test]
fn test_comma_transformation_3_0() {
    // For convenience, our comma test cases adopt a standard
    // (imaginary) layout for the input.  We do this so that the
    // input spans could conceivably have been generated by real
    // input, so that our tests don't inadvertently require the
    // implementation to allow inconsistent/invalid inputs.
    //
    // Span 0..3 is the initial commas (or spaces).
    // Span 3..15 is the constant 444333222111.
    // Span 15..18 is the trailing commas (or spaces).
    assert_eq!(
        comma_transformation(
            &Some(Commas::Three(span(0..3))),
            u36!(0o444_333_222_111),
            &None,
        ),
        u36!(0o000_000_000_111)
    );
}

// This test case is taken from the table "COMMA CHART" in section
// 6-2.4, "NUMERICAL FORMAT - USE OF COMMAS" of the Users
// Handbook.
#[test]
fn test_comma_transformation_3_1() {
    // For convenience, our comma test cases adopt a standard
    // (imaginary) layout for the input.  We do this so that the
    // input spans could conceivably have been generated by real
    // input, so that our tests don't inadvertently require the
    // implementation to allow inconsistent/invalid inputs.
    //
    // Span 0..3 is the initial commas (or spaces).
    // Span 3..15 is the constant 444333222111.
    // Span 15..18 is the trailing commas (or spaces).
    assert_eq!(
        comma_transformation(
            &Some(Commas::Three(span(0..3))),
            u36!(0o444_333_222_111),
            &Some(Commas::One(span(15..16))),
        ),
        u36!(0o000_000_000_444)
    );
}

// This test case is taken from the table "COMMA CHART" in section
// 6-2.4, "NUMERICAL FORMAT - USE OF COMMAS" of the Users
// Handbook.
#[test]
fn test_comma_transformation_3_2() {
    // For convenience, our comma test cases adopt a standard
    // (imaginary) layout for the input.  We do this so that the
    // input spans could conceivably have been generated by real
    // input, so that our tests don't inadvertently require the
    // implementation to allow inconsistent/invalid inputs.
    //
    // Span 0..3 is the initial commas (or spaces).
    // Span 3..15 is the constant 444333222111.
    // Span 15..18 is the trailing commas (or spaces).
    assert_eq!(
        comma_transformation(
            &Some(Commas::Three(span(0..3))),
            u36!(0o444_333_222_111),
            &Some(Commas::Two(span(15..17))),
        ),
        u36!(0o000_444_000_000)
    );
}

// This test case is taken from the table "COMMA CHART" in section
// 6-2.4, "NUMERICAL FORMAT - USE OF COMMAS" of the Users
// Handbook.
#[test]
fn test_comma_transformation_3_3() {
    // For convenience, our comma test cases adopt a standard
    // (imaginary) layout for the input.  We do this so that the
    // input spans could conceivably have been generated by real
    // input, so that our tests don't inadvertently require the
    // implementation to allow inconsistent/invalid inputs.
    //
    // Span 0..3 is the initial commas (or spaces).
    // Span 3..15 is the constant 444333222111.
    // Span 15..18 is the trailing commas (or spaces).
    assert_eq!(
        comma_transformation(
            &Some(Commas::Three(span(0..3))),
            u36!(0o444_333_222_111),
            &Some(Commas::Three(span(15..18))),
        ),
        u36!(0o000_000_444_333)
    );
}
